- name: Declare a Variable at play level
  hosts: all
  connection: local
  vars:
    URL: play.example.com
  tasks:
    - name: Access a Variable
      ansible.builtin.debug:
        msg: URL == {{URL}}

- name: Declare a Variable in another file
  hosts: all
  connection: local
  vars_files:
    - var.yml
  tasks:
    - name: Access a variable from a file
      ansible.builtin.debug:
        msg: URL == {{URL}}

## vars_files can also be declared at task level

- name: Declare a Variable at task level
  hosts: all
  connection: local
  tasks:
    - name: Access a Variable
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task.example.com

- name: Declare a Variable in inventory file
  hosts: all
  connection: local
  tasks:
    - name: Access a variable from inv file
      ansible.builtin.debug:
        msg: URL == {{URL}}

## vars_files cannot be declared at task level , it can be achieved through include_vars.

- name: Declare a Variable in file level
  hosts: all
  connection: local
  tasks:
    - include_vars: var.yml
    - name: Access a Variable from a file inside task
      ansible.builtin.debug:
        msg: URL == {{URL}}

- name: Access a fact
  hosts: all
  connection: local
  tasks:
    - name: Access a predefined variable in ansible
      ansible.builtin.debug:
        msg: Ansible Host Name == {{ ansible_fqdn }}

## if the value starts with a variable(in this case it is 'out' and it is in json format)
- name: Register a Variable
  hosts: all
  connection: local
  tasks:
    - name: Run a shell command
      ansible.builtin.shell: uptime
      register: out
    - name: Print out
      ansible.builtin.debug:
        msg:
          - "{{ out }}"
          - "{{ out.stdout }}"
    - name: Set a fact
      ansible.builtin.set_fact:
        OUTPUT: "{{ out.stdout }}"
    - name: Read OUTPUT
      ansible.builtin.debug:
        msg: "{{ OUTPUT }}"


